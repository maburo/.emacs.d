* .Xresoures
#+BEGIN_SRC 
emacs.Font: Source Code Pro for Powerline-12
emacs.menuBar: off
emacs.toolBar: off
emacs.scrollBar: of
#+END_SRC
* Packages
** Init pacakge
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-at-startup nil)
(setq package-archives '(("org"   . "http://orgmode.org/elpa/")
                         ("gnu"   . "http://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
(package-initialize)
(setq package-enable-at-startup nil)
#+END_SRC
** Use-package
https://github.com/jwiegley/use-package
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
#+END_SRC
* Appearance
** General
#+BEGIN_SRC emacs-lisp
  ;;  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  ;;  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
    (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
    (tooltip-mode -1)
    (show-paren-mode t)

    ;; line numbers
    (global-display-line-numbers-mode t)

    ;; Highlight current line
    (global-hl-line-mode 1)

    ;; Changes all yes/no questions to y/n type
    (fset 'yes-or-no-p 'y-or-n-p)

    ;; display “lambda” as “λ”
    (global-prettify-symbols-mode 1)

    ;; No cursor blinking, it's distracting
    (blink-cursor-mode 0)

   (setq-default create-lockfiles nil
                  make-backup-files nil
                  initial-scratch-message nil
                  ;; no beeping or blinking please
                  ring-bell-function #'ignore
                  ;; don't use hard tabs
                  indent-tabs-mode nil
                  ;; wrap lines
                  fill-column 120)  

    (setq inhibit-startup-screen t
          ;; no bell
          ring-bell-function 'ignore)
#+END_SRC
** Title
#+BEGIN_SRC emacs-lisp
  (setq frame-title-format
        '((:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name))
                   "%b"))))
#+END_SRC
** Unicode
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'set-charset-priority)
    (set-charset-priority 'unicode))
  (prefer-coding-system        'utf-8)
  (set-terminal-coding-system  'utf-8)
  (set-keyboard-coding-system  'utf-8)
  (set-selection-coding-system 'utf-8)
  (setq locale-coding-system   'utf-8)
  (setq-default buffer-file-coding-system 'utf-8)
#+END_SRC
** Scroll
#+BEGIN_SRC emacs-lisp
  (setq scroll-step 1) 
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
#+END_SRC
** COMMENT Font
#+BEGIN_SRC emacs-lisp
;;(add-to-list 'default-frame-alist '(font . "mononoki-12")) 
;;(set-frame-font "Source Code Pro for Powerline-12")
#+END_SRC
** Doom theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
      :ensure t
      :config
      (load-theme 'doom-one t)
      (setq doom-modeline-icon t))
#+END_SRC
** Doom modeline
#+BEGIN_SRC emacs-lisp
  ;; M-x all-the-icons-install-font
  (use-package all-the-icons
    :if window-system
    :ensure t
    :config
    (when (not (member "all-the-icons" (font-family-list)))
      (all-the-icons-install-fonts t)))

  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
#+END_SRC
** Diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish :ensure t)
#+END_SRC
** Beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init (beacon-mode t))
#+END_SRC
** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
* Ace jump mode
#+BEGIN_SRC emacs-lisp
  (use-package ace-jump-mode
    :ensure t
    :bind (("M-s" . ace-jump-mode)))
#+END_SRC
* Ace window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :bind ("<f8>" . ace-window))
#+END_SRC
* IDO
#+BEGIN_SRC emacs-lisp
  (ido-mode t)

  ;; This allows partial matches, e.g. "tl" will match "Tyrion Lannister"
  (setq ido-enable-flex-matching t)
  (setq ido-use-filename-at-point nil)
  (defalias 'list-buffers 'ibuffer)

  ;; Don't try to match file across all "work" directories; only match files
  ;; in the current directory displayed in the minibuffer
  (setq ido-auto-merge-work-directories-length -1)

  ;; Includes buffer names of recently open files, even if they're not open now
  (setq ido-use-virtual-buffers t)
#+END_SRC
* SMEX
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind ("M-x" . smex))
#+END_SRC
* Wich key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :defer 10
    :diminish which-key-mode
    :init
    (setq which-key-separator " "
          which-key-prefix-prefix "+")
    :config
    (setq which-key-key-replacement-alist
          '(("<\\([[:alnum:]-]+\\)>" . "\\1")
            ("left"                  . "◀")
            ("right"                 . "▶")
            ("up"                    . "▲")
            ("down"                  . "▼")
            ("delete"                . "DEL") ; delete key
            ("\\`DEL\\'"             . "BS") ; backspace key
            ("next"                  . "PgDn")
            ("prior"                 . "PgUp")))          
    (which-key-mode 1))
#+END_SRC
* Key mappings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f6>")
		  (lambda () (interactive) (find-file "~/.emacs.d/config.org")))
  (global-set-key (kbd "S-<f6>")
		  (lambda () (interactive) (load-file "~/.emacs.d/init.el")))
  (global-set-key (kbd "<f7>") 'switch-to-buffer)
  (global-set-key (kbd "S-<f7>") 'list-buffers)
  (global-set-key (kbd "M-s-/") 'undo-tree-visualize)
#+END_SRC
* Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    ;;    :hook (prog-mode . (lambda () company-mode))
    :init
    (global-company-mode)
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-lenght 2)
    (diminish 'company-mode))
#+END_SRC
* Yansippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :defer 10
    :demand t
    :diminish yas-minor-mode
    ;; :bind (("C-c y d" . yas-load-directory)
    ;;        ("C-c y i" . yas-insert-snippet)
    ;;        ("C-c y f" . yas-visit-snippet-file)
    ;;        ("C-c y n" . yas-new-snippet)
    ;;        ("C-c y t" . yas-tryout-snippet)
    ;;        ("C-c y l" . yas-describe-tables)
    ;;        ("C-c y g" . yas/global-mode)
    ;;        ("C-c y m" . yas/minor-mode)
    ;;        ("C-c y r" . yas-reload-all)
    ;;        ("C-c y x" . yas-expand))
    :config
    (use-package yasnippet-snippets :ensure t)
    ;; (add-to-list 'yas-snippet-dirs (ag/emacs-subdirectory "snippets"))
    (yas-global-mode t))
#+END_SRC
* Expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))
#+END_SRC
* Git
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)))
#+END_SRC
** Git-gutter
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter                 ;
    :ensure t
    :defer 10
    :config
    (global-git-gutter-mode))
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp

#+END_SRC
* Helm
** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t)
#+END_SRC
** Helm-projectile
#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :ensure t) 
#+END_SRC
* Org
** General
#+BEGIN_SRC emacs-lisp
  (use-package org
    :hook ((org-mode . org-indent-mode)
           (org-mode . visual-line-mode)))
#+END_SRC
** Org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode))
#+END_SRC
* C/C++
* Javascript
* Html
* Clojure
