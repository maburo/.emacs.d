#+TITLE: Emacs configuration

* .Xresoures
#+BEGIN_SRC 
emacs.Font: Source Code Pro for Powerline-12
emacs.menuBar: off
emacs.toolBar: off
emacs.scrollBar: of
#+END_SRC
* Server
#+begin_src emacs-lisp
  (load "server")
  (unless (server-running-p) (server-start))
#+end_src
** Mint
/usr/share/applications/emacsclient.desktop
#+BEGIN_SRC shell
[Desktop Entry]
Version=1.0
Name=Emacs client
GenericName=Text Editor
Comment=GNU Emacs is an extensible, customizable text editor - and more
MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
TryExec=/usr/bin/emacsclient
Exec=/usr/bin/emacsclient -c %F
Icon=emacs24
Type=Application
Terminal=false
Categories=Utility;Development;TextEditor;
StartupWMClass=Emacs24
Keywords=Text;Editor;
#+END_SRC
* Packages
** Init pacakge
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-at-startup nil)
(setq package-archives '(("org"   . "http://orgmode.org/elpa/")
                         ("gnu"   . "http://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
(package-initialize)
(setq package-enable-at-startup nil)
#+END_SRC
** Use-package
The [[https://github.com/jwiegley/use-package][use-package]] macro allows you to isolate package configuration in your .emacs file
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
#+END_SRC
** Try
#+BEGIN_SRC emacs-lisp
  (use-package try
    :defer
    :ensure t)
#+END_SRC
* Workspaces
#+BEGIN_SRC emacs-lisp
;;  (use-package workgroups2
;;    :ensure t
;;    :bind ("<f9>" . wg-switch-to-workgroup)
;;    :config
;;    (workgroups-mode 1)
;;    (setq wg-session-file "~/.emacs.d/.emacs_workgroups"
;;          wg-emacs-exit-save-behavior 'save
;;          wg-workgroups-mode-exit-save-behavior 'save))
#+END_SRC
* Files & backup
#+BEGIN_SRC emacs-lisp
  (setq-default create-lockfiles nil
                make-backup-files nil
                auto-save-default nil)
  ;; (setq backup-directory-alist
  ;;       `((".*" . ,temporary-file-directory)))
  ;; (setq auto-save-file-name-transforms
  ;;       `((".*" ,temporary-file-directory t)))
#+END_SRC
** Ranger
#+BEGIN_SRC emacs-lisp
  (use-package ranger
    :commands (ranger)
    :ensure t
    :demand t)
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
  ;; always delete and copy recursively
  (setq dired-recursive-deletes 'always)
  (setq dired-recursive-copies 'always)
#+END_SRC
* Appearance
** General
#+BEGIN_SRC emacs-lisp
  ;;  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  ;;  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (tooltip-mode -1)
  (show-paren-mode t)

  ;; line numbers
  (global-display-line-numbers-mode t)

  ;; Column numbers in modeline
  ;; (column-number-mode t)

  ;; Highlight current line
  (global-hl-line-mode 1)

  ;; Changes all yes/no questions to y/n type
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; display “lambda” as “λ”
  (global-prettify-symbols-mode 1)

  ;; No cursor blinking, it's distracting
  (blink-cursor-mode 0)

  (setq-default initial-scratch-message nil
                ;; no beeping or blinking please
                ring-bell-function #'ignore
                ;; don't use hard tabs
                indent-tabs-mode nil
                ;; wrap lines
                fill-column 120)

  (setq inhibit-startup-screen t
        ;; no bell
        ring-bell-function 'ignore)
  (when (fboundp 'winner-mode)
    (winner-mode 1))
#+END_SRC
** Title
#+BEGIN_SRC emacs-lisp
  (setq frame-title-format
        '((:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name))
                   "%b"))))
#+END_SRC
** Unicode
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'set-charset-priority)
    (set-charset-priority 'unicode))
  (prefer-coding-system        'utf-8)
  (set-terminal-coding-system  'utf-8)
  (set-keyboard-coding-system  'utf-8)
  (set-selection-coding-system 'utf-8)
  (setq locale-coding-system   'utf-8)
  (setq-default buffer-file-coding-system 'utf-8)
#+END_SRC
** Smooth scroll
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Auto-Scrolling.html][Automatic scrolling]]
#+BEGIN_SRC emacs-lisp
  ;; (setq scroll-step 1
  ;;       scroll-margin 1
  ;;       scroll-up-aggressively 0.01
  ;;       scroll-down-aggressively 0.01
  ;;       scroll-conservatively 1
  ;;       auto-window-vscroll nil
  ;;       mouse-wheel-scroll-amount '(1 ((shift) . 1)))

  (setq scroll-preserve-screen-position t
        scroll-conservatively 101
        scroll-margin 0
        mouse-wheel-scroll-amount '(1 ((shift) . 1)))
#+END_SRC
** COMMENT Font
#+BEGIN_SRC emacs-lisp
;;(add-to-list 'default-frame-alist '(font . "mononoki-12"))
;;(set-frame-font "Source Code Pro for Powerline-12")
#+END_SRC
** Doom theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
      :ensure t
      :config
      (load-theme 'doom-one t)
      (setq doom-modeline-icon t))
#+END_SRC
** Doom modeline
#+BEGIN_SRC emacs-lisp
  ;; M-x all-the-icons-install-font
  (use-package all-the-icons
    :if window-system
    :ensure t
    :config
    (when (not (member "all-the-icons" (font-family-list)))
      (all-the-icons-install-fonts t)))

  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
#+END_SRC
** Diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish :ensure t)
#+END_SRC
** Beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init (beacon-mode t))
#+END_SRC
** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
** Anzu
Provides a minor mode which displays current match and total matches information in the mode-line in various search modes.
#+BEGIN_SRC emacs-lisp
  (use-package anzu
    :ensure t
    :config
    (global-anzu-mode +1))
#+END_SRC
* Ace jump mode
#+BEGIN_SRC emacs-lisp
  (use-package ace-jump-mode
    :ensure t
    :bind (("M-s" . ace-jump-mode)))
#+END_SRC
* Ace window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :bind ("<f8>" . ace-window))
#+END_SRC
* IDO
#+BEGIN_SRC emacs-lisp
  (ido-mode t)

  ;; This allows partial matches, e.g. "tl" will match "Tyrion Lannister"
  (setq ido-enable-flex-matching t)
  (setq ido-use-filename-at-point nil)
  ;; stop ido from suggesting when naming new file
  (define-key (cdr ido-minor-mode-map-entry) [remap write-file] nil)
  (defalias 'list-buffers 'ibuffer)

  ;; Don't try to match file across all "work" directories; only match files
  ;; in the current directory displayed in the minibuffer
  (setq ido-auto-merge-work-directories-length -1)

  ;; Includes buffer names of recently open files, even if they're not open now
  (setq ido-use-virtual-buffers t)

  (use-package ido-vertical-mode
    :ensure t
    :config
    (ido-vertical-mode 1))
#+END_SRC
* SMEX
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind ("M-x" . smex))
#+END_SRC
* Wich key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :defer 10
    :diminish which-key-mode
    :init
    (setq which-key-separator " "
          which-key-prefix-prefix "+")
    :config
    (setq which-key-key-replacement-alist
          '(("<\\([[:alnum:]-]+\\)>" . "\\1")
            ("left"                  . "◀")
            ("right"                 . "▶")
            ("up"                    . "▲")
            ("down"                  . "▼")
            ("delete"                . "DEL") ; delete key
            ("\\`DEL\\'"             . "BS") ; backspace key
            ("next"                  . "PgDn")
            ("prior"                 . "PgUp")))
    (which-key-mode 1))
#+END_SRC
* Helpful
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :ensure t
    :bind (("C-h f" . helpful-callable)
           ("C-h v" . helpful-variable)
           ("C-h k" . helpful-key)
           ("C-h C-d" . helpful-at-point)))
#+END_SRC
* Key mappings
#+BEGIN_SRC emacs-lisp
  ;; (global-set-key (kbd "<f6>")
  ;;                 (lambda () (interactive) (find-file "~/.emacs.d/config.org")))
  ;; (global-set-key (kbd "S-<f6>")
  ;;                 (lambda () (interactive) (load-file "~/.emacs.d/init.el")))
  ;; (global-set-key (kbd "<f7>") 'switch-to-buffer)
  ;; (global-set-key (kbd "S-<f9>") 'list-buffers)
  (global-set-key (kbd "s-k") 'kill-this-buffer)
  (global-set-key (kbd "C-<f3>") 'kmacro-start-macro-or-insert-counter)
  (global-set-key (kbd "C-<f4>") 'kmacro-end-or-call-macro)
  ;; (global-set-key (kbd "M-s-/") 'undo-tree-visualize)
#+END_SRC
* Hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t
    :config
    (defhydra hydra-win (global-map "<S-f8>")
      "window size"
      ("f" shrink-window  "shrink")
      ("j" enlarge-window "enlarge")
      ("d" shrink-window-horizontally "shrink H")
      ("k" enlarge-window-horizontally "enlarge H")
      ("2" split-window-below "split below")
      ("3" split-window-right "split right")
      ("o" other-window "other window")))
#+END_SRC
* Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (global-company-mode)
    :config
    ;; From https://github.com/company-mode/company-mode/issues/87
    ;; See also https://github.com/company-mode/company-mode/issues/123
    (defadvice company-pseudo-tooltip-unless-just-one-frontend
        (around only-show-tooltip-when-invoked activate)
      (when (company-explicit-action-p)
        ad-do-it))
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-lenght 1)
    (setq completion-ignore-case t)
    (setq company-show-numbers t)
    (diminish 'company-mode))
#+END_SRC
* Edit
** General
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode +1)
#+END_SRC
** Go to beginning of the line
#+BEGIN_SRC emacs-lisp
  (defun smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

  ;; remap C-a to `smarter-move-beginning-of-line'
  (global-set-key [remap move-beginning-of-line]
                  'smarter-move-beginning-of-line)
#+END_SRC
** Undo tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :bind ("C-s-/" . undo-tree-visualize))
#+END_SRC
** Expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))
#+END_SRC
** Visual replace
#+BEGIN_SRC emacs-lisp
  (use-package visual-regexp
    :ensure t
    :bind (("C-c r" . vr/replace)
           ("C-c R" . vr/query-replace)
           ("C-c m" . vr/mc-mark)))
#+END_SRC
** Multiple cursors
https://github.com/magnars/multiple-cursors.el
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind (("C-M-<up>" . mc/mark-previous-like-this)
           ("C-M-<down>" . mc/mark-next-like-this)
           ("C-M-<mouse-1>" . mc/add-cursor-on-click)))
#+END_SRC
** Smart parens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :diminish smartparens-mode
    :config
    (progn
      (require 'smartparens-config)
      (add-hook 'js-mode-hook #'smartparens-mode)
      (add-hook 'c-mode-common-hook #'smartparens-mode)))
#+END_SRC
** Paredit
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :hook ((emacs-lisp-mode . paredit-mode)
           (lisp-interaction-mode . paredit-mode)
           (ielm-mode . paredit-mode)
           (lisp-mode . paredit-mode)
           (eval-expression-minibuffer-setup . paredit-mode)
           (clojure-mode . paredit-mode)))
#+END_SRC
** Show trailing whitespaces
#+BEGIN_SRC emacs-lisp
;; (add-hook 'prog-mode-hook (lambda () (interactive) (setq show-trailing-whitespace 0)))
#+END_SRC
** Use space for tabs
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC
** Smart hungry delete
#+BEGIN_SRC emacs-lisp
  (use-package smart-hungry-delete
    :ensure t
    :bind (("<backspace>" . smart-hungry-delete-backward-char)
           ("C-d" . smart-hungry-delete-forward-char)
           ("<delete>" . smart-hungry-delete-forward-char))
    :defer nil ;; dont defer so we can add our functions to hooks
    :config (smart-hungry-delete-add-default-hooks))
#+END_SRC
** Drag stuff
#+BEGIN_SRC emacs-lisp
  (use-package drag-stuff
    :ensure t
    :bind (("M-<up>" . drag-stuff-up)
           ("M-<down>" . drag-stuff-down)))
#+END_SRC
** Copy file path
#+BEGIN_SRC emacs-lisp
  (defun copy-file-name-to-clipboard ()
    "Copy the current buffer file name to the clipboard."
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
                        default-directory
                      (buffer-file-name))))
      (when filename
        (kill-new filename)
        (message "Copied buffer file name '%s' to the clipboard." filename))))
#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :mode (("\\.h\\(h?\\|xx\\|pp\\)\\'" . c++-mode)
           ("\\.m\\'" . c-mode)
           ("\\.mm\\'" . c++-mode))
    :hook ((c-mode . flycheck-mode)
           (c++-mode . flycheck-mode))
    :ensure t)
#+END_SRC
* Yansippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :defer 10
    :demand t
    :diminish yas-minor-mode
    ;; :bind (("C-c y d" . yas-load-directory)
    ;;        ("C-c y i" . yas-insert-snippet)
    ;;        ("C-c y f" . yas-visit-snippet-file)
    ;;        ("C-c y n" . yas-new-snippet)
    ;;        ("C-c y t" . yas-tryout-snippet)
    ;;        ("C-c y l" . yas-describe-tables)
    ;;        ("C-c y g" . yas/global-mode)
    ;;        ("C-c y m" . yas/minor-mode)
    ;;        ("C-c y r" . yas-reload-all)
    ;;        ("C-c y x" . yas-expand))
    :config
    (use-package yasnippet-snippets :ensure t)
    (yas-global-mode t))
#+END_SRC
* Git
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("s-g" . magit-status)))
#+END_SRC
** Git-gutter
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t
    :defer 10
    :config
    (global-git-gutter-mode))
#+END_SRC
** Git-timemachine
[[https://gitlab.com/pidu/git-timemachine][git-timemachine]] usage:
- =p= Visit previous historic version
- =n= Visit next historic version
- =w= Copy the abbreviated hash of the current historic version
- =W= Copy the full hash of the current historic version
- =g= Goto nth revision
- =t= Goto revision by selected commit message
- =q= Exit the time machine.
- =b= Run magit-blame on the currently visited revision (if magit available).
- =c= Show current commit using magit (if magit available).
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :ensure t)
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
    (use-package projectile
  ;;    :defer 5
      :diminish
      :ensure t
      :bind (("C-c p" . projectile-command-map)
             ("s-p" . projectile-command-map)
             ("<f9>". helm-projectile-switch-to-buffer))
      :config
      (projectile-mode t)
      (setq projectile-require-project-root nil))
#+END_SRC
* Skeletor
#+BEGIN_SRC emacs-lisp
    (use-package skeletor
      :commands (skeletor-create-project)
      :ensure t
      :config
      (setq skeletor-user-directory "~/.emacs.d/skeletor-user-directory"
             skeletor-project-directory "~/projects")
      (skeletor-define-template "webpack-js"
        :title "Webpack JS"
        :default-license (rx bol "gpl")
        :after-creation
        (lambda (dir) (skeletor-shell-command "npm i"))))
#+END_SRC
* Helm
** Helm
http://tuhdo.github.io/helm-intro.html
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind (("<f3>" . helm-occur)
           ("<f4>" . helm-imenu)
           ("<f9>" . helm-buffers-list)
           ("C-x r l" . helm-filtered-bookmarks)
           ("C-x C-f" . helm-find-files)
           ("M-x" . helm-M-x)))
    ;;:config
    ;;(setq helm-split-window-in-side-p t)
    ;;(setq helm-autoresize-max-height 50)
    ;;(setq helm-autoresize-min-height 30)
    ;;(helm-autoresize-mode t))
#+END_SRC
** Helm-projectile
#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :ensure t
    :bind (("<f12>" . helm-projectile)))
#+END_SRC
* Langs
** Org
*** General
#+BEGIN_SRC emacs-lisp
  (setq org-image-actual-width nil)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))

  (use-package org
    :init
    (setq org-image-actual-width nil
          ;;org-startup-with-inline-images t
          )
    ;; (require 'ob-js)
    :hook ((org-mode . org-indent-mode)
           (org-mode . visual-line-mode)))
#+END_SRC
*** Org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode))
#+END_SRC
** Emacs lisp
#+BEGIN_SRC emacs-lisp

#+END_SRC
** C/C++
*** General
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-common-hook (lambda () (local-set-key (kbd "C-c o") 'ff-find-other-file)))
  (add-hook 'c-mode-common-hook (lambda () (semantic-mode 1) ))
#+END_SRC
*** Folding
Usage:
| C-c @ C-c   | hs-toggle-hiding |
| C-c @ C-h   | hs-hide-block    |
| C-c @ C-l   | hs-hide-level    |
| C-c @ C-s   | hs-show-block    |
| C-c @ C-M-h | hs-hide-all      |
| C-c @ C-M-s | hs-show-all      |
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-common-hook 'hs-minor-mode)
#+END_SRC
*** Cmake-mode
#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode
    :mode ("CMakeLists.txt" "\\.cmake\\'"))
#+END_SRC
*** Company c/++ headers
Auto-completion for C/C++ headers using Company [[https://github.com/randomphrase/company-c-headers][github]]
#+BEGIN_SRC emacs-lisp
  (use-package company-c-headers
    :ensure t
    :config
    (add-to-list 'company-backends 'company-c-headers))
#+END_SRC
*** Modern c++
#+BEGIN_SRC emacs-lisp
  (use-package modern-cpp-font-lock
    :ensure t
    :hook (c++-mode . modern-cpp-font-lock))
#+END_SRC
** Javascript
*** js2-mode
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode "\\.js\\'"
    :interpreter "node"
    :hook ((js-mode . js2-minor-mode)
           (js-mode . hs-minor-mode)
           (js-mode . js2-imenu-extras-mode))
    :config
    (setq js-indent-level 2
          js2-basic-indent 2
          js-chain-indent t))
#+END_SRC
*** tern
#+BEGIN_SRC emacs-lisp
  (use-package tern
    :requires company
    :after company
    :hook (js2-mode . tern-mode)
    :ensure t
  ;;  :init (add-hook 'js2-mode-hook 'tern-mode)
    :config
    (use-package company-tern
      :ensure t
      :init (add-to-list 'company-backends 'company-tern)))
#+END_SRC
** Html
*** Emmet-mode
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :diminish
    :hook (web-mode . emmet-mode))
#+END_SRC
** Clojure
*** Clojure mode
[[https://github.com/clojure-emacs/cider][Clojure mode]] - support for the Clojure(Script) programming language
#+BEGIN_SRC emacs-lisp
    (use-package clojure-mode
      :ensure t
      :init
      (defconst clojure--prettify-symbols-alist
        '(("fn"   . ?λ)
          ("__"   . ?⁈)))
      :hook ((cider-repl-mode . paredit-mode))
      :bind
      (("C-c j" . cider-jack-in)))
  ;;x(push 'company-capf company-backends-cider-mode)
  ;;(push 'company-capf company-backends-cider-repl-mode)
#+END_SRC
*** Clojure refactor
#+BEGIN_SRC emacs-lisp
  (use-package clj-refactor
    :ensure t
    :defer t
    :hook (clojure-mode . clj-refactor-mode)) 
#+END_SRC
*** Cider
The [[https://github.com/clojure-emacs/cider][Cider project]] is da bomb. Usage:
- =cider-jack-in= - For starting an nREPL server and setting
  everything up. Keyboard: =C-c M-j=
- =cider= to connect to an existing nREPL server.
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t
    :commands (cider cider-connect cider-jack-in)
    :hook ((clojure-mode . cider-mode)
           (cider-repl-mode . cider-company-enable-fuzzy-completion)
           (cider-mode . cider-company-enable-fuzzy-completion))
    :init
    (setq cider-auto-select-error-buffer t
          cider-repl-use-pretty-printing t
          cider-repl-pop-to-buffer-on-connect nil
          cider-repl-use-clojure-font-lock t
          cider-repl-wrap-history t
          cider-repl-history-size 1000
          cider-show-error-buffer t))
#+END_SRC
** Docker
*** Docker-compose
#+BEGIN_SRC emacs-lisp
  (use-package docker-compose-mode
    :ensure t)
#+END_SRC
